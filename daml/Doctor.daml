module Doctor where

import MedicalRecord
import HealthInsurance


type AppointmentId = ContractId Appointment

-- Add a new type alias for currencies
type Currency = Text
-- Add a new data type to describe amounts, including the currency
data Amount = Amount { quantity : Int, currency : Currency } deriving (Eq, Show) 


-- | An enum that captures the settlement status of a trade.
data AppointmentStatus
  = Initiated
    -- ^ Appointment offered by doctor 
  | Accepted
    -- ^ Accepted by patient
  | Closed
    -- ^ Treatment delievered and appointment closed
  deriving (Eq, Show)

{-
  Offer for a doctors appointment

  The given contract allows a patient to schedule an appointment
  with his doctor.
-}
template OfferAppointment
  with
    doctor : Party
    patient : Party
  where
    signatory doctor
    observer patient
    
    {-
      Accept the appointment

      The patient can accept an appointment by providing
      his medical records and by showing his insurance policy.
    -}
    choice AcceptAppointment : (AppointmentId, MedicalRecord.RegisterId, HealthInsurance.PolicyId)
      with
        registerId : MedicalRecord.RegisterId
        insurer : Party
      controller patient 
      do
        -- Add the doctor as an observer to the medical record and to the policy
        rId <- exercise registerId MedicalRecord.AddObserver with party = doctor
        policyId <- fetchByKey @Policy (insurer, patient)
        pId <- exercise policyId._1 HealthInsurance.AddObserver with party = doctor
        ap <- create Appointment with doctor, patient, registerId = rId, policyId = pId, status = Accepted
        return (ap, rId, pId)


{-
  A pending appointment

  This contract represents a pending appointment.
-}
template Appointment
  with
    doctor : Party
    patient : Party
    registerId: MedicalRecord.RegisterId
    policyId : HealthInsurance.PolicyId
    status : AppointmentStatus
  where
    signatory doctor, patient

    {-
      Prescribe treatment
    -}
    nonconsuming choice  PrescribeTreatment : ( MedicalRecord.RegisterId)
      with
        description : Text
        treatment : HealthInsurance.Treatment
        fee : Amount
      controller doctor  
      do
        {-
          Update medical records
        -}
        register <- fetch registerId
        -- Ensure that this is the right register
        assertMsg "Not a relevant record"  (register.owner == patient)
        -- Add new record to register
        registerId2 <- exercise registerId AddRecord with description, doctor
        {-
          Invoice treatment
        -}
        policy <- fetch policyId
        -- Ensure that this is the right policy
        assertMsg "Wrong policy document provided" (policy.client == patient)
       
        return (registerId2)
    {-
    Payment received by doctor and the appointment contract can be archived now
    -}
    choice PaymentReceived : AppointmentId
      controller doctor
      do 
        create this with status = Closed
        
    