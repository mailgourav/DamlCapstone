module MedicalRecord where

import Daml.Script

{-
    Simple representation of a medical record including a
    description, a reference to the doctor and the time it got entered
-}
data Record = Record with 
    description : Text 
    timestamp : Time 
    doctor : Party 
        deriving (Show, Eq)

type RegisterId = ContractId Register

addOnce : [Party] -> Party -> [Party]
addOnce list party = if (any (\x -> x == party) list) then list else party :: list

{-
    Container to manage the medical records.
-}
template Register
  with
    registry : Party
    owner : Party
    observers : [Party]
    records : [Record]
  where

    signatory registry
    observer observers
  
    choice AddRecord : RegisterId
        with
            description : Text
            doctor : Party
        controller owner
        do
            timestamp <- getTime
            let newRecord = Record with description, timestamp, doctor
            create this with records = newRecord :: records
    

    choice AddObserver : RegisterId 
        with 
          party : Party 
        controller owner
        do 
          create this with observers = addOnce observers party

testMR = script do 
  alice <- allocateParty "Alice"
  registry <- allocateParty "Registry"
  doctor <- allocateParty "Doctor"

  mb <- submit registry do 
    createCmd Register with registry, owner = alice, observers = [alice], records = []

  mb <- submit alice do
    exerciseCmd mb AddRecord with description = "Don't think the patient will last long unless he quits smoking.", doctor

  mb <- submit alice do
    exerciseCmd mb AddObserver with party = doctor

  return ()

