module HealthInsurance where


import Daml.Script

-- Add a new type alias for currencies
type Currency = Text
-- Add a new data type to describe amounts, including the currency
data Amount = Amount { quantity : Int, currency : Currency } deriving (Eq, Show) 


{-
  Simple definition of a treatment as a text string.
-}
type Treatment = Text 

-- Type alias for Policy instance
type PolicyId = ContractId Policy

addOnce : [Party] -> Party -> [Party]
addOnce list party = if (any (\x -> x == party) list) then list else party :: list


{-
  Health care insurance policy

  Insurance policy here is a contract between the insurer and a client, which includes the set of 
  treatments included in this policy.
-}
template Policy 
  with 
    insurer : Party 
    client : Party 
    paymentBank : Party    
    treatments : [Treatment]
    observers : [Party]
  where 
    signatory insurer 
    observer observers, client
    key(insurer, client) : (Party, Party)
    maintainer key._1
    {-
      Claim a treatment 
      
      Choice that allows
      a client to create a claim for a treatment he received from
      a doctor. 
      Exercising this choice will 
      keep the insurance Policy contract active.
    -}
    nonconsuming choice  CreateClaim : ()
      with 
        treatment : Treatment 
        doctor : Party
        fee : Amount
      controller client
      do 
        -- Check that claimed treatment is covered
        assertMsg "Treatment not covered under the policy" (any (\x -> x == treatment) treatments)
        assertMsg "Currency not supported" (fee.currency == "USD")
        assertMsg "Claim Amount can't exceed 1000$" (fee.quantity <= 1000)
        -- TBD Create a new claim for the given treatment


    {-
      Add an observer to this contract

      This makes the given contract visible to the new observer.
    -}
    choice AddObserver : PolicyId  
      with
        party : Party
      controller client   
      do 
        create this with observers = addOnce observers party

testScript : Script ()
testScript = script do 

  let treatments = ["GeneralCounsel", "Flu-shot", "Hip-replacement"]
  client <- allocateParty "Alice"
  insurer <- allocateParty "Insurance"
  bank <- allocateParty "Bank"
  doctor <- allocateParty "doctor"

  policyId <- submit insurer do
    createCmd Policy with insurer, client, paymentBank = bank, treatments, observers = []

  submitMustFail client do
    exerciseCmd policyId CreateClaim with 
      treatment = "Tooth-replacement"
      doctor = doctor
      fee = Amount { currency = "USD", quantity = 15 }
    
  submitMustFail client do
    exerciseCmd policyId CreateClaim with 
      treatment = "GeneralCounsel"
      doctor = doctor
      fee = Amount { currency = "SGD", quantity = 15 }  

  submitMustFail client do
    exerciseCmd policyId CreateClaim with 
      treatment = "GeneralCounsel"
      doctor = doctor
      fee = Amount { currency = "USD", quantity = 1500 }  

  return()