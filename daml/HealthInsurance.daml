module HealthInsurance where

import Daml.Script

{-
  Simple definition of a treatment as a text string.

  We will use the treatment definition in order to simulate the
  treatment catalogue included in an health insurance policy.
-}
type Treatment = Text 

-- Type alias for Policy instance
type PolicyId = ContractId Policy

addOnce : [Party] -> Party -> [Party]
addOnce list party = if (any (\x -> x == party) list) then list else party :: list


{-
  Health care insurance policy

  We simplistically model the insurance policy here as a contract
  between the insurer and a client, which includes the set of 
  treatments included in this policy.
-}
template Policy 
  with 
    insurer : Party 
    client : Party 
    paymentBank : Party    
    treatments : [Treatment]
    observers : [Party]
  where 
    signatory insurer 
    observer observers, client
    key(insurer, client) : (Party, Party)
    maintainer key._1
    -- {-
    --   Claim a treatment 
      
    --   The only choice included in this contract is a choice that allows
    --   a client to create a claim for a treatment he received from
    --   a doctor. 

    --   Note one special thing: the choice is non-consuming which means
    --   that in contrast to normal choices, exercising this choice will 
    --   keep the insurance Policy contract active.
    -- -}
    -- choice nonconsuming CreateClaim : ClaimId
    --   with 
    --     treatment : Treatment 
    --     doctor : Party
    --     fee : Amount
    --   controller client
    --   do 
    --     -- Check that claimed treatment is covered
    --     assert (any (\x -> x == treatment) treatments)
    --     -- Create a new claim for the given treatment
    --     create Claim with insurer, doctor, client, paymentBank, treatment, fee

    {-
      Add an observer to this contract

      This makes the given contract visible to the new observer.
    -}
    choice AddObserver : PolicyId  
      with
        party : Party
      controller client   
      do 
        create this with observers = addOnce observers party

setup = script do 

  let treatments = ["GeneralCounsel", "Flu-shot", "Hip-replacement"]
  client <- allocateParty "Alice"
  insurer <- allocateParty "Insurance"
  bank <- allocateParty "Bank"

  policyId <- submit insurer do
    createCmd Policy with insurer, client, paymentBank = bank, treatments, observers = []

  return (client, insurer, policyId)    